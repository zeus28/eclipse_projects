package com.marakana.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Address;

public class AddressRepository {

	private final DataSource ds;

	public AddressRepository() {
		try {
			Context context = new InitialContext();
			try {

				ds = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");

			} finally {
				context.close();
			}
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
	}

	public void init() throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.execute("create table IF NOT EXISTS address(address_id integer generated by default as identity, city varchar(255),street varchar(255)" + 
						",state varchar(255),zip varchar(255),PRIMARY KEY (address_id) );");
				
				//statement.execute("drop table address");

			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}
	}

	public Address find(long id) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {

				ResultSet results = statement.executeQuery("select * from address where id = " + id);
				try {
					if (!results.next()) {
						return null;
					} else {
						return unmarshal(results);
					}
				} finally {
					results.close();
				}
			} finally {
				statement.close();
			}

		} finally {
			connection.close();

		}
	}

	public static Address unmarshal(ResultSet results) throws SQLException {

		Address address = new Address();
		address.setId(results.getLong("address_id"));
		address.setCity(results.getString("City"));
		address.setStreet(results.getString("Street"));
		address.setState(results.getString("State"));
		address.setZip(results.getString("Zip"));

		return address;

	}

	public void create(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "insert into address (street,city ,state,zip) values ('" + address.getStreet() + "','"
						+ address.getCity() + "','" + address.getState() + "','" + address.getZip() + "' )";
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						address.setId(generatedKeys.getLong("id"));
					}

				} finally {
					generatedKeys.close();
				}

			} finally {
				statement.close();
			}

		} finally {
			connection.close();

		}
	}

	public void delete(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {

				String sql = "delete from address where id = " + address.getId();
				statement.executeUpdate(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void update(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {

				String sql = "update address set street = '" + address.getStreet() + "',city='" + address.getCity()
						+ "',zip ='" + address.getZip() + "',state = '" + address.getState() + "' where id ="
						+ address.getId();

				statement.executeUpdate(sql);

			} finally {
				statement.close();
			}

		} finally {
			connection.close();

		}
	}

}
